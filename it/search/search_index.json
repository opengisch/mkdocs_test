{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Welcome"},{"location":"support/","text":"Support and Development \u00b6 Commercial Support \u00b6 As developer of QField, QFieldCloud and QFieldSync, OPENGIS.ch provides training packages and custom commercial support contracts with SLA. Development and Custom Apps \u00b6 You probably have plenty of ideas for nice features that are not implemented yet. Please contact us to discuss the best approach to integrate this idea into QField or to create your own custom app. Community Support \u00b6 You can ask your questions on gis.stackexchange You can use the user mailing list Funding \u00b6 The following oranizations have contributed to make QField what it currently is. We would like to warmly say: Thanks a lot! Credits \u00b6 QField, QFieldSync and QFieldCloud are developped by OPENGIS.ch. OPENGIS.ch does consulting, development and training for open source software including QField and QGIS. API stability \u00b6 QField is currently not considered API stable. License \u00b6 QField is released under the GNU Public License (GPL) Version 2 or above. Developing QField under this license means that you can inspect and modify the source code and guarantees that you will always have access to a QGIS based field data collection app that is free of cost and can be freely modified. You can find the sourcecode on github","title":"Support and Development"},{"location":"support/#support-and-development","text":"","title":"Support and Development"},{"location":"support/#commercial-support","text":"As developer of QField, QFieldCloud and QFieldSync, OPENGIS.ch provides training packages and custom commercial support contracts with SLA.","title":"Commercial Support"},{"location":"support/#development-and-custom-apps","text":"You probably have plenty of ideas for nice features that are not implemented yet. Please contact us to discuss the best approach to integrate this idea into QField or to create your own custom app.","title":"Development and Custom Apps"},{"location":"support/#community-support","text":"You can ask your questions on gis.stackexchange You can use the user mailing list","title":"Community Support"},{"location":"support/#funding","text":"The following oranizations have contributed to make QField what it currently is. We would like to warmly say: Thanks a lot!","title":"Funding"},{"location":"support/#credits","text":"QField, QFieldSync and QFieldCloud are developped by OPENGIS.ch. OPENGIS.ch does consulting, development and training for open source software including QField and QGIS.","title":"Credits"},{"location":"support/#api-stability","text":"QField is currently not considered API stable.","title":"API stability"},{"location":"support/#license","text":"QField is released under the GNU Public License (GPL) Version 2 or above. Developing QField under this license means that you can inspect and modify the source code and guarantees that you will always have access to a QGIS based field data collection app that is free of cost and can be freely modified. You can find the sourcecode on github","title":"License"},{"location":"qfield/concepts/","text":"QField - your mobile [Q]GIS solution \u00b6 QField allows you to efficiently work on your GIS data outdoor. QField's optimized user interface for mobile devices hides the full power of QGIS under the hood. E3_5 QField (QGIS on the Road) from OPENGIS.ch on Vimeo . Concepts \u00b6 QField was designed with a few key concepts in mind. Keep it simple \u00b6 The requirements on the field are not the same as on a desktop. The screen is smaller, the input devices are different and the tasks are different. QField aims to help the user to perform the tasks he needs to do without cluttering the user interface. This means, that only tasks which need to be done on the field are availble from the interface. Everything else is not. This means that everything like layer styling, form definitions and other project setup steps should be done on a computer with QGIS installed first. Be compatible with QGIS \u00b6 QField is based on QGIS. It is not a rebuild of QGIS it really does use QGIS libraries. The rendering engine is exactly the same as in QGIS for desktop and your project will therefore look exactly the same on your mobile device as it does on your computer. If something is already available as a configuration option in a QGIS project, it should not be re-invented. QField therefore uses the same edit widgets as QGIS desktop does. If a project is already configured for the desktop, it should just run on mobile as well. Remember, this is just the concept . This is what we have in mind when we develop QField. It does not mean that it is already completely there yet. Mode based \u00b6 QField is built around modes . Modes are similar to a map tool in QGIS desktop. A mode defines the task which a user is currently doing. Either a user is browsing through the data or he is digitizing something new.","title":"QField - your mobile [Q]GIS solution"},{"location":"qfield/concepts/#qfield-your-mobile-qgis-solution","text":"QField allows you to efficiently work on your GIS data outdoor. QField's optimized user interface for mobile devices hides the full power of QGIS under the hood. E3_5 QField (QGIS on the Road) from OPENGIS.ch on Vimeo .","title":"QField - your mobile [Q]GIS solution"},{"location":"qfield/concepts/#concepts","text":"QField was designed with a few key concepts in mind.","title":"Concepts"},{"location":"qfield/concepts/#keep-it-simple","text":"The requirements on the field are not the same as on a desktop. The screen is smaller, the input devices are different and the tasks are different. QField aims to help the user to perform the tasks he needs to do without cluttering the user interface. This means, that only tasks which need to be done on the field are availble from the interface. Everything else is not. This means that everything like layer styling, form definitions and other project setup steps should be done on a computer with QGIS installed first.","title":"Keep it simple"},{"location":"qfield/concepts/#be-compatible-with-qgis","text":"QField is based on QGIS. It is not a rebuild of QGIS it really does use QGIS libraries. The rendering engine is exactly the same as in QGIS for desktop and your project will therefore look exactly the same on your mobile device as it does on your computer. If something is already available as a configuration option in a QGIS project, it should not be re-invented. QField therefore uses the same edit widgets as QGIS desktop does. If a project is already configured for the desktop, it should just run on mobile as well. Remember, this is just the concept . This is what we have in mind when we develop QField. It does not mean that it is already completely there yet.","title":"Be compatible with QGIS"},{"location":"qfield/concepts/#mode-based","text":"QField is built around modes . Modes are similar to a map tool in QGIS desktop. A mode defines the task which a user is currently doing. Either a user is browsing through the data or he is digitizing something new.","title":"Mode based"},{"location":"qfield/installation/","text":"Installation \u00b6 Android \u00b6 QField can be used with any version newer than Android 5, if you are looking to get a new device, we suggest going for at least Android 9. Get it on Google Play Get a pre-built apk \u00b6 We also offer a pre-built apk for you to download if you are not able or do not want to use GooglePlay. You can get the qfield apk from the release page . Windows \u00b6 A beta version of QField for windows can be found here . iOS \u00b6 An iOS version is in the making.","title":"Installation"},{"location":"qfield/installation/#installation","text":"","title":"Installation"},{"location":"qfield/installation/#android","text":"QField can be used with any version newer than Android 5, if you are looking to get a new device, we suggest going for at least Android 9. Get it on Google Play","title":"Android"},{"location":"qfield/installation/#get-a-pre-built-apk","text":"We also offer a pre-built apk for you to download if you are not able or do not want to use GooglePlay. You can get the qfield apk from the release page .","title":"Get a pre-built apk"},{"location":"qfield/installation/#windows","text":"A beta version of QField for windows can be found here .","title":"Windows"},{"location":"qfield/installation/#ios","text":"An iOS version is in the making.","title":"iOS"},{"location":"qfield/prepare/1-n-pictures/","text":"Add a series of pictures to a feature \u00b6 You can add one or more pictures to a feature. Below you find an example how to proceed. Creating two tables \u00b6 We will need two tables. One table where the features are stored and one with a list of pictures. Apiary id (UUID) geometry ... Apiary_pictures id apiary_id (UUID) path (TEXT) ... Relations \u00b6 Create a relation with: apiary Referenced layer id Referenced field apiary_picture Referencing layer apiary_id Referencing field strength Composition Widgets \u00b6 apiary Set the default value of the field id to uuid() . There is no need to show it in the form, since it will be filled by QField and does not contain any human readable information. Set the relation widget to Many to one relation and add the relation to the form picture Set the widget type of the field path to attachment and add it to the form Geotagging \u00b6 Some mobile devices will require Open Camera to be installed in order to enable geotagging. To enable geotagging perform the following steps: In QField, go to the settings and make sure \"Use native Camera\" is activated Install the Open Camera app on your mobile device Within the Open Camera settings, make sure geotagging is enabled Within you mobile device settings, set the default camera app to Open Camera Completed! Open Camera will now be utilized while taking pictures with QField","title":"Add a series of pictures to a feature"},{"location":"qfield/prepare/1-n-pictures/#add-a-series-of-pictures-to-a-feature","text":"You can add one or more pictures to a feature. Below you find an example how to proceed.","title":"Add a series of pictures to a feature"},{"location":"qfield/prepare/1-n-pictures/#creating-two-tables","text":"We will need two tables. One table where the features are stored and one with a list of pictures. Apiary id (UUID) geometry ... Apiary_pictures id apiary_id (UUID) path (TEXT) ...","title":"Creating two tables"},{"location":"qfield/prepare/1-n-pictures/#relations","text":"Create a relation with: apiary Referenced layer id Referenced field apiary_picture Referencing layer apiary_id Referencing field strength Composition","title":"Relations"},{"location":"qfield/prepare/1-n-pictures/#widgets","text":"apiary Set the default value of the field id to uuid() . There is no need to show it in the form, since it will be filled by QField and does not contain any human readable information. Set the relation widget to Many to one relation and add the relation to the form picture Set the widget type of the field path to attachment and add it to the form","title":"Widgets"},{"location":"qfield/prepare/1-n-pictures/#geotagging","text":"Some mobile devices will require Open Camera to be installed in order to enable geotagging. To enable geotagging perform the following steps: In QField, go to the settings and make sure \"Use native Camera\" is activated Install the Open Camera app on your mobile device Within the Open Camera settings, make sure geotagging is enabled Within you mobile device settings, set the default camera app to Open Camera Completed! Open Camera will now be utilized while taking pictures with QField","title":"Geotagging"},{"location":"qfield/prepare/advanced/","text":"Advanced \u00b6 Itinerary \u00b6 This feature is used to inspect a list of objects that match a certain criteria. You may then navigate through these features with arrows and verify their status or adjust attributes as required. To define an itinerary to review you will need to use the python console for the moment. You can use any QgsExpression to define the review list. Select the desired layer in the legend and use the following python code to add the itinerary to the QGIS project. 1 2 l = iface . activeLayer () l . setCustomProperty ( 'qgisMobile/itinerary' , 'status <> 1' )","title":"Advanced"},{"location":"qfield/prepare/advanced/#advanced","text":"","title":"Advanced"},{"location":"qfield/prepare/advanced/#itinerary","text":"This feature is used to inspect a list of objects that match a certain criteria. You may then navigate through these features with arrows and verify their status or adjust attributes as required. To define an itinerary to review you will need to use the python console for the moment. You can use any QgsExpression to define the review list. Select the desired layer in the legend and use the following python code to add the itinerary to the QGIS project. 1 2 l = iface . activeLayer () l . setCustomProperty ( 'qgisMobile/itinerary' , 'status <> 1' )","title":"Itinerary"},{"location":"qfield/prepare/attribute-form/","text":"Attribute Form Configuration \u00b6 QField creates forms similar to, but not equal to QGIS. Suppress Attribute Form \u00b6 The setting \"suppress attribute form\" is directly applied to the QField form. Field widget \u00b6 The field widgets from QGIS are supported on a best effort basis. Widget type Support Notes Text Edit - HTML is not supported - Numerical input is enforced based on the type. Check Box Value Map Hidden Attachment This field is combined with camera integration. It is also able to open other files like pdf and doc (if the user has an appropriate viewer) Attachment (photo settings) Date Time Relation Reference Relation Widget Value Relation Others Funding Relation Widget \u00b6 For more information refer to the relations chapter of the official QGIS Documentation . A list of child features from a different layer The relation widget shows all the referencing child features in a list. It is possible to add, delete and open them. The visual identification of the list entries are done via the \"Display Expression\" of the child layer. Key handling Since the parents primary keys are used as foreign keys on the referencing child features, these primary keys must be save to use even after the synchronization back to the original data. Therefore we recommend to use stable values such as UUIDs for primary keys. It is possible to already add children from a parent that is about to be added. This possibility will be blocked if there is no valid primary key on the parent or the constraints are violated. In case the adding of the parent feature is canceled after some children have been added already, the children are deleted as well. Many-To-Many relations On many-to-many relationships, according to the cardinality setting in the QGIS Vector Layer Properties, on adding, deleting or opening an entry in the list effects directly the child layer (on direct cardinality) or the linking table (on many-to-one cardinality). The second case is usually used when there are additional relation information (e.g. percentage) in the linking table. In case of the many-to-one cardinality on many-to-many relations the Display Expression needs to be set on the linking table. Attachment (photo settings) \u00b6 The widget type \"Attachment\" is used with fields that store the path to files. It can be used to: show and take photos show links to external files like pdfs or documents The path should be set to relative. The pictures, pdf and docs are stored then in a sub-directory of the project, where the link stored in the textfield is pointing to. In QField the picture is displayed. By clicking the camera symbol the camera is started to update the picture with a new photo. On synchronization the sub-directory with the pictures, pdf and docs has to be copied as well. The option \"hyperlink\" on the attachment widget will disable the camera functionality and enable a hyperlink to open a document (pdf, doc, ...). Value Relation \u00b6 The widget \"Value Relation\" offers values from a related table in a combobox. You can select layer, key column and value column. Several options are available to change the standard behaviors: allow null value, order by value and allow multiple selections. The widget will display a drop-down or multiple-select list of the referenced features. Drag and drop designer forms \u00b6 Groups and Tabs from Drag and Drop designer forms are supported. Conditional visibility \u00b6 Groups can be hidden based on an expression. This is useful when certain attributes are only required under certain conditions. As an example imagine mapping trees. Some of them might have a disease and you have a list of possible deseases. To not clutter the form with many fields, make a group and configure a visibility expression for a group \"diseases\". Add a field \"desease\" with a checkbox. Only when the checkbox is checked, the list of diseases will be available to the user. Configuration of a group box that will only be shown if the checkbox \"measures_taken\" is checked. Let's see what we got on the field: Sorry, your browser doesn't support embedded videos. Constraints \u00b6 Attribute fields can have constraints attached. Constraints are expressions that needs to evaluate to True (or 1 ) in order to be able to save the form. Constraints are configured on a per-field basis and a description can be added that will be shown to the user if a constraint is not satisfied. Configuration of a constraint within a range Common use cases \u00b6 You cannot enter an elevation value higher than the highest mountain in this country. \"elevation\" < 5000 It is required to fill in an identifier. \"identifier\" IS NOT NULL Default values \u00b6 Fields can have default values configured. Default values are inserted into the attribute form when digitizing a new feature. They are visible to the user and can be modified as long as the field is editable. They can be based on the geometry or expression variables. Configuration of a formatted date as default value Additional variables \u00b6 In QField, there are some additional variables available regarding the current positioning information. position_coordinate (Geometry in WGS84!) : Lon, Lat, Altitude as delivered by the sensor. Is also available when the crosshair is not snapped to the sensor. position_timestamp (DateTime) : Timestamp of the position information position_direction (float) : Direction in degrees from true north. position_ground_speed (float) : Groundspeed in meters / second. position_magnetic_variation (float) : The angle between the horizontal component of the magnetic field and true north, in degrees. Also known as magnetic declination. A positive value indicates a clockwise direction from true north and a negative value indicates a counter-clockwise direction. position_horizontal_accuracy (float) : The horizontal accuracy of the coordinate (in meters). position_vertical_accuracy (float) : The vertical accuracy of the coordinate (in meters). position_vertical_speed (float) : The value of the vertical speed in meters per second. Common use cases \u00b6 Insert positioning information as variable: @ position_horizontal_accuracy Insert the current date and time: now () Insert the length of the digitized line: length ( $ geometry ) Configure global variables on the device and insert them. @ operator_name If you want to assign a region code based on the location where a new feature is inserted, you can do so by using an aggregate expression: aggregate ( layer : = 'regions' , aggregate : = 'max' , expression : = \"code\" , filter : = intersects ( $ geometry , geometry ( @ parent ) ) ) Editable \u00b6 The editable flag of fields is respected. Remember last values \u00b6 QField offers a much more fine-grained control over the last used values and ignores the QGIS setting. Add QML and HTML widgets \u00b6 You can add a QML or HTML widget. By using QML or HTML widgets you are able to display information in charts, tables or otherwise formatted ways. Sorry, your browser doesn't support embedded videos.","title":"Attribute Form Configuration"},{"location":"qfield/prepare/attribute-form/#attribute-form-configuration","text":"QField creates forms similar to, but not equal to QGIS.","title":"Attribute Form Configuration"},{"location":"qfield/prepare/attribute-form/#suppress-attribute-form","text":"The setting \"suppress attribute form\" is directly applied to the QField form.","title":"Suppress Attribute Form"},{"location":"qfield/prepare/attribute-form/#field-widget","text":"The field widgets from QGIS are supported on a best effort basis. Widget type Support Notes Text Edit - HTML is not supported - Numerical input is enforced based on the type. Check Box Value Map Hidden Attachment This field is combined with camera integration. It is also able to open other files like pdf and doc (if the user has an appropriate viewer) Attachment (photo settings) Date Time Relation Reference Relation Widget Value Relation Others Funding","title":"Field widget"},{"location":"qfield/prepare/attribute-form/#relation-widget","text":"For more information refer to the relations chapter of the official QGIS Documentation . A list of child features from a different layer The relation widget shows all the referencing child features in a list. It is possible to add, delete and open them. The visual identification of the list entries are done via the \"Display Expression\" of the child layer. Key handling Since the parents primary keys are used as foreign keys on the referencing child features, these primary keys must be save to use even after the synchronization back to the original data. Therefore we recommend to use stable values such as UUIDs for primary keys. It is possible to already add children from a parent that is about to be added. This possibility will be blocked if there is no valid primary key on the parent or the constraints are violated. In case the adding of the parent feature is canceled after some children have been added already, the children are deleted as well. Many-To-Many relations On many-to-many relationships, according to the cardinality setting in the QGIS Vector Layer Properties, on adding, deleting or opening an entry in the list effects directly the child layer (on direct cardinality) or the linking table (on many-to-one cardinality). The second case is usually used when there are additional relation information (e.g. percentage) in the linking table. In case of the many-to-one cardinality on many-to-many relations the Display Expression needs to be set on the linking table.","title":"Relation Widget"},{"location":"qfield/prepare/attribute-form/#attachment-photo-settings","text":"The widget type \"Attachment\" is used with fields that store the path to files. It can be used to: show and take photos show links to external files like pdfs or documents The path should be set to relative. The pictures, pdf and docs are stored then in a sub-directory of the project, where the link stored in the textfield is pointing to. In QField the picture is displayed. By clicking the camera symbol the camera is started to update the picture with a new photo. On synchronization the sub-directory with the pictures, pdf and docs has to be copied as well. The option \"hyperlink\" on the attachment widget will disable the camera functionality and enable a hyperlink to open a document (pdf, doc, ...).","title":"Attachment (photo settings)"},{"location":"qfield/prepare/attribute-form/#value-relation","text":"The widget \"Value Relation\" offers values from a related table in a combobox. You can select layer, key column and value column. Several options are available to change the standard behaviors: allow null value, order by value and allow multiple selections. The widget will display a drop-down or multiple-select list of the referenced features.","title":"Value Relation"},{"location":"qfield/prepare/attribute-form/#drag-and-drop-designer-forms","text":"Groups and Tabs from Drag and Drop designer forms are supported.","title":"Drag and drop designer forms"},{"location":"qfield/prepare/attribute-form/#conditional-visibility","text":"Groups can be hidden based on an expression. This is useful when certain attributes are only required under certain conditions. As an example imagine mapping trees. Some of them might have a disease and you have a list of possible deseases. To not clutter the form with many fields, make a group and configure a visibility expression for a group \"diseases\". Add a field \"desease\" with a checkbox. Only when the checkbox is checked, the list of diseases will be available to the user. Configuration of a group box that will only be shown if the checkbox \"measures_taken\" is checked. Let's see what we got on the field: Sorry, your browser doesn't support embedded videos.","title":"Conditional visibility"},{"location":"qfield/prepare/attribute-form/#constraints","text":"Attribute fields can have constraints attached. Constraints are expressions that needs to evaluate to True (or 1 ) in order to be able to save the form. Constraints are configured on a per-field basis and a description can be added that will be shown to the user if a constraint is not satisfied. Configuration of a constraint within a range","title":"Constraints"},{"location":"qfield/prepare/attribute-form/#common-use-cases","text":"You cannot enter an elevation value higher than the highest mountain in this country. \"elevation\" < 5000 It is required to fill in an identifier. \"identifier\" IS NOT NULL","title":"Common use cases"},{"location":"qfield/prepare/attribute-form/#default-values","text":"Fields can have default values configured. Default values are inserted into the attribute form when digitizing a new feature. They are visible to the user and can be modified as long as the field is editable. They can be based on the geometry or expression variables. Configuration of a formatted date as default value","title":"Default values"},{"location":"qfield/prepare/attribute-form/#additional-variables","text":"In QField, there are some additional variables available regarding the current positioning information. position_coordinate (Geometry in WGS84!) : Lon, Lat, Altitude as delivered by the sensor. Is also available when the crosshair is not snapped to the sensor. position_timestamp (DateTime) : Timestamp of the position information position_direction (float) : Direction in degrees from true north. position_ground_speed (float) : Groundspeed in meters / second. position_magnetic_variation (float) : The angle between the horizontal component of the magnetic field and true north, in degrees. Also known as magnetic declination. A positive value indicates a clockwise direction from true north and a negative value indicates a counter-clockwise direction. position_horizontal_accuracy (float) : The horizontal accuracy of the coordinate (in meters). position_vertical_accuracy (float) : The vertical accuracy of the coordinate (in meters). position_vertical_speed (float) : The value of the vertical speed in meters per second.","title":"Additional variables"},{"location":"qfield/prepare/attribute-form/#common-use-cases_1","text":"Insert positioning information as variable: @ position_horizontal_accuracy Insert the current date and time: now () Insert the length of the digitized line: length ( $ geometry ) Configure global variables on the device and insert them. @ operator_name If you want to assign a region code based on the location where a new feature is inserted, you can do so by using an aggregate expression: aggregate ( layer : = 'regions' , aggregate : = 'max' , expression : = \"code\" , filter : = intersects ( $ geometry , geometry ( @ parent ) ) )","title":"Common use cases"},{"location":"qfield/prepare/attribute-form/#editable","text":"The editable flag of fields is respected.","title":"Editable"},{"location":"qfield/prepare/attribute-form/#remember-last-values","text":"QField offers a much more fine-grained control over the last used values and ignores the QGIS setting.","title":"Remember last values"},{"location":"qfield/prepare/attribute-form/#add-qml-and-html-widgets","text":"You can add a QML or HTML widget. By using QML or HTML widgets you are able to display information in charts, tables or otherwise formatted ways. Sorry, your browser doesn't support embedded videos.","title":"Add QML and HTML widgets"},{"location":"qfield/prepare/change-map-theme/","text":"","title":"Change map theme"},{"location":"qfield/prepare/custom-svg/","text":"Custom SVG symbols \u00b6 It is possible to embed SVG symbols directly within a QGIS projects. Choose the layer which will support SVG symbology and open its properties dialog. Open the section Symbology in Properties --> Symbology . In the Symbol Layer Panel choose Simple marker. Change the Symbol layer type in Symbol layer type --> SVG marker . Scroll down the bottom panel. Click on the right side of the file selection button to open the drop down menu. Select Embed File and choose the SVG file in the file selection dialog. Apply the changes and click OK.","title":"Custom SVG symbols"},{"location":"qfield/prepare/custom-svg/#custom-svg-symbols","text":"It is possible to embed SVG symbols directly within a QGIS projects. Choose the layer which will support SVG symbology and open its properties dialog. Open the section Symbology in Properties --> Symbology . In the Symbol Layer Panel choose Simple marker. Change the Symbol layer type in Symbol layer type --> SVG marker . Scroll down the bottom panel. Click on the right side of the file selection button to open the drop down menu. Select Embed File and choose the SVG file in the file selection dialog. Apply the changes and click OK.","title":"Custom SVG symbols"},{"location":"qfield/prepare/display-expression/","text":"Feature Names \u00b6 You can give your features names by specifying a display expression . It will appear in several places, for example when you tap to identify a feature. In the example below, you can see how it is used with a combination of the beekeeper and the bee species. Layer properties \u00b6 To edit the display expression, go to \"layer Properties\" => \"Display\". The expression used defines what you see when you click on features.","title":"Feature Names"},{"location":"qfield/prepare/display-expression/#feature-names","text":"You can give your features names by specifying a display expression . It will appear in several places, for example when you tap to identify a feature. In the example below, you can see how it is used with a combination of the beekeeper and the bee species.","title":"Feature Names"},{"location":"qfield/prepare/display-expression/#layer-properties","text":"To edit the display expression, go to \"layer Properties\" => \"Display\". The expression used defines what you see when you click on features.","title":"Layer properties"},{"location":"qfield/prepare/hiding-legend/","text":"Allow hiding legend nodes \u00b6 First, you should to verify if the plugin Invisible layers and groups is installed, if you don't have installed, you can do it going to Plugins > Manage and install plugins > find Invisible layers and groups > click in install plugin . When you finish the installation of the plugin, you will see in the QGIS interface this buttons: Once the installation process is finished, it is possible to start hiding the nodes of the legend our project. Choose the layers or groups that you want to hide. When you finish the layer/group selection, click Make selected layers and groups invisible . You will notice the selected layers and groups have disappear from the layers panel. They are still available in the project for visualization and joins, though. Save your project, you can use the section QFieldSync plugin to save your project, or save your geopackage and project in the same folder. Copy the files generated in your device. Open QField in your device, and you will see the configuration of hidden legend nodes. Note If you want to see the hidden layers/groups again, click on show invisible layers and groups.","title":"Allow hiding legend nodes"},{"location":"qfield/prepare/hiding-legend/#allow-hiding-legend-nodes","text":"First, you should to verify if the plugin Invisible layers and groups is installed, if you don't have installed, you can do it going to Plugins > Manage and install plugins > find Invisible layers and groups > click in install plugin . When you finish the installation of the plugin, you will see in the QGIS interface this buttons: Once the installation process is finished, it is possible to start hiding the nodes of the legend our project. Choose the layers or groups that you want to hide. When you finish the layer/group selection, click Make selected layers and groups invisible . You will notice the selected layers and groups have disappear from the layers panel. They are still available in the project for visualization and joins, though. Save your project, you can use the section QFieldSync plugin to save your project, or save your geopackage and project in the same folder. Copy the files generated in your device. Open QField in your device, and you will see the configuration of hidden legend nodes. Note If you want to see the hidden layers/groups again, click on show invisible layers and groups.","title":"Allow hiding legend nodes"},{"location":"qfield/prepare/map-styling/","text":"Map styling and configuration \u00b6 Most of the settings which QGIS offers are directly supported by QField without any extra effort. Style \u00b6 All style settings from QGIS are directly supported by QField. This includes all renderer types like graduated, categorized, rule based, 2.5D as well as data defined symbology. Display Expression \u00b6 In QField, objects are identified with a name. The expression to generate this name can be defined by opening the attribute table in QGIS and switching to the form view. Choose the appropriate field or an expression in the list there. Starting from QGIS 3, this can be done directly from the Vector Layer Properties --> Display page. The display expression is also used to search in layers. The display expression will be used to represent features with an identification string throughout QField. Read only, non-identifiable and searchable layers \u00b6 Some layers in a project are just there for pure visual purpose. Such layers should not show up when a user taps somewhere to identify objects. Some other layers serve as source of information and shouldn't be modified by the user. It is possible to protect layers from editing attributes or adding and deleting features. It is also possible to configure which layers are searchable. To configure identify, readonly and searchable behavior, go to the Project --> Project Properties --> Identify Layers page and activate the checkboxes to match your desired behavior. Configuration of layers that will not be identifiable, not modifiable and/or not searchable. Snapping \u00b6 While digitizing new features, new points can be snapped to existing geometries. All configuration can be done in Project --> Snapping Settings ( Settings --> Snapping Settings in QGIS 2.x). Snapping Types \u00b6 It is possible to snap new points only to nodes of existing geomtries only to segments of existing geomtries to nodes and segments of existing geomtries Snapping to layers \u00b6 It is also possible to only snap to one or a few layers. Snapping tolerance \u00b6 The snapping tolerance can be specified in map units or pixels. In almost any case, the units should be set to pixels. We made good experiences with a tolerance value of 20. 3D Coordinates \u00b6 GPS devices are capable of measuring the altitude next to the current 2D position on the earth surface. This information can be saved.","title":"Map styling and configuration"},{"location":"qfield/prepare/map-styling/#map-styling-and-configuration","text":"Most of the settings which QGIS offers are directly supported by QField without any extra effort.","title":"Map styling and configuration"},{"location":"qfield/prepare/map-styling/#style","text":"All style settings from QGIS are directly supported by QField. This includes all renderer types like graduated, categorized, rule based, 2.5D as well as data defined symbology.","title":"Style"},{"location":"qfield/prepare/map-styling/#display-expression","text":"In QField, objects are identified with a name. The expression to generate this name can be defined by opening the attribute table in QGIS and switching to the form view. Choose the appropriate field or an expression in the list there. Starting from QGIS 3, this can be done directly from the Vector Layer Properties --> Display page. The display expression is also used to search in layers. The display expression will be used to represent features with an identification string throughout QField.","title":"Display Expression"},{"location":"qfield/prepare/map-styling/#read-only-non-identifiable-and-searchable-layers","text":"Some layers in a project are just there for pure visual purpose. Such layers should not show up when a user taps somewhere to identify objects. Some other layers serve as source of information and shouldn't be modified by the user. It is possible to protect layers from editing attributes or adding and deleting features. It is also possible to configure which layers are searchable. To configure identify, readonly and searchable behavior, go to the Project --> Project Properties --> Identify Layers page and activate the checkboxes to match your desired behavior. Configuration of layers that will not be identifiable, not modifiable and/or not searchable.","title":"Read only, non-identifiable and searchable layers"},{"location":"qfield/prepare/map-styling/#snapping","text":"While digitizing new features, new points can be snapped to existing geometries. All configuration can be done in Project --> Snapping Settings ( Settings --> Snapping Settings in QGIS 2.x).","title":"Snapping"},{"location":"qfield/prepare/map-styling/#snapping-types","text":"It is possible to snap new points only to nodes of existing geomtries only to segments of existing geomtries to nodes and segments of existing geomtries","title":"Snapping Types"},{"location":"qfield/prepare/map-styling/#snapping-to-layers","text":"It is also possible to only snap to one or a few layers.","title":"Snapping to layers"},{"location":"qfield/prepare/map-styling/#snapping-tolerance","text":"The snapping tolerance can be specified in map units or pixels. In almost any case, the units should be set to pixels. We made good experiences with a tolerance value of 20.","title":"Snapping tolerance"},{"location":"qfield/prepare/map-styling/#3d-coordinates","text":"GPS devices are capable of measuring the altitude next to the current 2D position on the earth surface. This information can be saved.","title":"3D Coordinates"},{"location":"qfield/prepare/map-themes/","text":"Configure Map Themes \u00b6 The beautiful thing about GIS is that maps are dynamic. Layers can individually be shown and hidden and information can be presented more or less prominently based on the task at hand. This is what Map Themes (before QGIS 3.0 known as Visibility Presets ) are for. Creating a Map Theme \u00b6 Creating a Map Theme in QGIS is a very simple task. Style the map and layers to your requirements Save it as a named Map Theme Load the project on your device and change the active Map Theme Change the active Map Theme \u00b6 Switching Map Themes is possible from the Dashboard. Use the Map Themes combobox to chose the active theme.","title":"Configure Map Themes"},{"location":"qfield/prepare/map-themes/#configure-map-themes","text":"The beautiful thing about GIS is that maps are dynamic. Layers can individually be shown and hidden and information can be presented more or less prominently based on the task at hand. This is what Map Themes (before QGIS 3.0 known as Visibility Presets ) are for.","title":"Configure Map Themes"},{"location":"qfield/prepare/map-themes/#creating-a-map-theme","text":"Creating a Map Theme in QGIS is a very simple task. Style the map and layers to your requirements Save it as a named Map Theme Load the project on your device and change the active Map Theme","title":"Creating a Map Theme"},{"location":"qfield/prepare/map-themes/#change-the-active-map-theme","text":"Switching Map Themes is possible from the Dashboard. Use the Map Themes combobox to chose the active theme.","title":"Change the active Map Theme"},{"location":"qfield/prepare/picture-path/","text":"Configurable picture path \u00b6 QFieldSync gives the possibility to configure the path of picture attachments. Go to QFieldSync plugin --> Project configuration Select the table \"Photo Naming\" Choose the layer, the field and configure the expression Use expressions to configure the path of the attachments. By default, pictures are saved into the DCIM folder with a timestamp as name. Note QGIS 3.14 or newer is required for this functionality","title":"Configurable picture path"},{"location":"qfield/prepare/picture-path/#configurable-picture-path","text":"QFieldSync gives the possibility to configure the path of picture attachments. Go to QFieldSync plugin --> Project configuration Select the table \"Photo Naming\" Choose the layer, the field and configure the expression Use expressions to configure the path of the attachments. By default, pictures are saved into the DCIM folder with a timestamp as name. Note QGIS 3.14 or newer is required for this functionality","title":"Configurable picture path"},{"location":"qfield/prepare/print/","text":"Print to PDF \u00b6 It's possible to export the maps and other items to a PDF document. If the project has at least one print layout defined, printing is available over the menu. After selecting the print layout, the PDF document is created and stored in the devices documents directory. By choosing the PDF reader app, the document can be opened directly. Done. Note The devices documents directory is USER>/<APPNAME>/Documents . For QField this is usually a path like ////storage/emulated/0/Documents/QField","title":"Print to PDF"},{"location":"qfield/prepare/print/#print-to-pdf","text":"It's possible to export the maps and other items to a PDF document. If the project has at least one print layout defined, printing is available over the menu. After selecting the print layout, the PDF document is created and stored in the devices documents directory. By choosing the PDF reader app, the document can be opened directly. Done. Note The devices documents directory is USER>/<APPNAME>/Documents . For QField this is usually a path like ////storage/emulated/0/Documents/QField","title":"Print to PDF"},{"location":"qfieldcloud/concepts/","text":"Concepts \u00b6 QFieldCloud is a service designed to synchronize projects and data between QGIS (+ QFieldSync plugin) and QField. Initially it will allow to replace the use of the cable to copy projects in QField and later it will also allow to synchronize data and view and edit projects via web interface. Be among the first to try QFieldCloud","title":"Concepts"},{"location":"qfieldcloud/concepts/#concepts","text":"QFieldCloud is a service designed to synchronize projects and data between QGIS (+ QFieldSync plugin) and QField. Initially it will allow to replace the use of the cable to copy projects in QField and later it will also allow to synchronize data and view and edit projects via web interface. Be among the first to try QFieldCloud","title":"Concepts"},{"location":"qfieldcloud/api/v1/","text":"API V1 Reference \u00b6 Collaborators \u00b6 The Collaborators API allows you to list the collaborators of a project, define new collaborators, retrieve, modify and delete existing ones. A collaborator has a role. Possible roles are: Name Description admin The owner of a project is always admin of the project. He can add and remove collaborators manager Can add or remove collaborators editor Can edit data reporter Can only insert data (no update nor delete). (Don\u2019t have to be a collaborator?) reader Can read data. (Don\u2019t have to be a collaborator?) A higher role always include also the lower ones. Note A collaborator of an project owned by a simple user can only be reporter or reader . Editor or manager role can only be set to an organization\u2019s project. List collaborators of a project \u00b6 List all the collaborators of a project. Anyone logged in can use this endpoint. GET /collaborators\u200b/{projectid}\u200b/ Parameters \u00b6 Name Type In Description projectid string path The project id (uuid) Default response \u00b6 Status: 200 OK [ { \"collaborator\" : \"albus\" , \"role\" : \"admin\" }, { \"collaborator\" : \"severus\" , \"role\" : \"manager\" }, ] Forbidden \u00b6 Status: 403 Forbidden Define a new collaborator \u00b6 Define a user as collaborator of a project. POST /collaborators\u200b/{projectid}\u200b/ Parameters \u00b6 Name Type In Description projectid string path The project id (uuid) collaborator string body Required . The username of the new collaborator role string body Required . The role of the new collaborator ( admin , manager , editor , reporter , reader ) ... To be continued...","title":"API V1 Reference"},{"location":"qfieldcloud/api/v1/#api-v1-reference","text":"","title":"API V1 Reference"},{"location":"qfieldcloud/api/v1/#collaborators","text":"The Collaborators API allows you to list the collaborators of a project, define new collaborators, retrieve, modify and delete existing ones. A collaborator has a role. Possible roles are: Name Description admin The owner of a project is always admin of the project. He can add and remove collaborators manager Can add or remove collaborators editor Can edit data reporter Can only insert data (no update nor delete). (Don\u2019t have to be a collaborator?) reader Can read data. (Don\u2019t have to be a collaborator?) A higher role always include also the lower ones. Note A collaborator of an project owned by a simple user can only be reporter or reader . Editor or manager role can only be set to an organization\u2019s project.","title":"Collaborators"},{"location":"qfieldcloud/api/v1/#list-collaborators-of-a-project","text":"List all the collaborators of a project. Anyone logged in can use this endpoint. GET /collaborators\u200b/{projectid}\u200b/","title":"List collaborators of a project"},{"location":"qfieldcloud/api/v1/#parameters","text":"Name Type In Description projectid string path The project id (uuid)","title":"Parameters"},{"location":"qfieldcloud/api/v1/#default-response","text":"Status: 200 OK [ { \"collaborator\" : \"albus\" , \"role\" : \"admin\" }, { \"collaborator\" : \"severus\" , \"role\" : \"manager\" }, ]","title":"Default response"},{"location":"qfieldcloud/api/v1/#forbidden","text":"Status: 403 Forbidden","title":"Forbidden"},{"location":"qfieldcloud/api/v1/#define-a-new-collaborator","text":"Define a user as collaborator of a project. POST /collaborators\u200b/{projectid}\u200b/","title":"Define a new collaborator"},{"location":"qfieldcloud/api/v1/#parameters_1","text":"Name Type In Description projectid string path The project id (uuid) collaborator string body Required . The username of the new collaborator role string body Required . The role of the new collaborator ( admin , manager , editor , reporter , reader ) ... To be continued...","title":"Parameters"},{"location":"qfieldcloud/api/v2/","text":"","title":"V2"},{"location":"qfieldcloud/dev/permissions/","text":"Permissions \u00b6 Actors \u00b6 Unregistered user Simple registered user, neither collaborator of the concerned project nor member of the concerned organization nor the concerned user Project owner of the concerned project, the conerned user, but not collaborator nor organization member Project collaborator role admin of the concerned project Project collaborator role manager of the concerned project Project collaborator role editor of the concerned project Project collaborator role reporter of the concerned project Project collaborator role reader of the concerned project Organization owner of the concerned organization or the organization that owns the concerned project or to which belongs the user Organizaton member role admin of the concerned organization or the organization that owns the concerned project or to which belongs the user Organization member role member of the concerned organization or the organization that owns the concerned project or to which belongs the user Actions \u00b6 0 -> Not allowed 1 -> Allowed - -> Irrelevant Action 1 2 3 4 5 6 7 8 9 10 11 List/query project's collaborator roles 0 1 - - - - - - - - - Create project's collaborator (i.e. define new collaborator) 0 0 1 1 1 0 0 0 1 1 0 Update project's collaborator's info (i.e. role) 0 0 1 1 1 0 0 0 1 1 0 Delete project's collaborator (i.e. remove user as collaborator) 0 0 1 1 1 0 0 0 1 1 0 List organization's members 0 1 - - - - - - 1 1 1 Create organization's member (i.e. define a new member) 0 0 - - - - - - 1 1 0 Get organization's member info (i.e. role) 0 1 - - - - - - 1 1 1 Update organization's member info (i.e. role) 0 0 - - - - - - 1 1 0 Delete organization's member info (i.e. remove user as organization's member) 0 0 - - - - - - 1 1 0 List/query public projects 0 1 1 1 1 1 1 1 1 1 1 List/query private projects 0 0 1 1 1 1 1 1 1 1 0 Update project's info 0 0 1 1 0 0 0 0 1 1 0 Create a project 0 1 - - - - - - 1 1 0 Delete project 0 0 1 0 0 0 0 0 1 1 0 Add deltafile 0 0 1 1 1 1 1 0 1 1 0 List project's deltafiles 0 0 1 1 1 1 1 0 1 1 0 Get deltafile's status 0 0 1 1 1 1 1 0 1 1 0 List project's files (qfieldsync) 0 0 1 1 1 1 1 1 1 1 0 Download project's files (qfieldsync) 0 0 1 1 1 1 1 1 1 1 0 Upload project's files (qfieldsync) 0 0 1 1 1 1 1 0 1 1 0 Delete project's files (qfieldsync) 0 0 1 1 1 1 1 0 1 1 0 List project's files (qfield) 0 0 1 1 1 1 1 1 1 1 0 Download project's files (qfield) 0 0 1 1 1 1 1 1 1 1 0 List users and organizations 0 1 - - - - - - - - - Get user's public informations 0 1 - - - - - - - - - Get user's detailed informations 0 0 - - - - - - 1 1 0 Update user's informations 0 0 1 - - - - - 0 0 0 Delete user 0 0 1 - - - - - 0 0 0 Get API status 1 1 - - - - - - - - - Roles \u00b6 ProjectCollaborator \u00b6 A collaborator of an normal user project can only be reporter or reader. Editor or manager can only be set to an organization's project. Roles A higher role always include also the lowest ones Name Description admin The owner of a project is always admin of the project. He can add and remove collaborators manager Can add or remove collaborators editor Can edit data reporter Can only insert data (no update nor delete). (Don't have to be a collaborator?) reader Can read data. (Don't have to be a collaborator?) OrganizationMember \u00b6 Roles A higher role always include also the lowest ones Name Description admin She can add and remove members and create project member (difference compared to an other user is for billing reasons only)","title":"Permissions"},{"location":"qfieldcloud/dev/permissions/#permissions","text":"","title":"Permissions"},{"location":"qfieldcloud/dev/permissions/#actors","text":"Unregistered user Simple registered user, neither collaborator of the concerned project nor member of the concerned organization nor the concerned user Project owner of the concerned project, the conerned user, but not collaborator nor organization member Project collaborator role admin of the concerned project Project collaborator role manager of the concerned project Project collaborator role editor of the concerned project Project collaborator role reporter of the concerned project Project collaborator role reader of the concerned project Organization owner of the concerned organization or the organization that owns the concerned project or to which belongs the user Organizaton member role admin of the concerned organization or the organization that owns the concerned project or to which belongs the user Organization member role member of the concerned organization or the organization that owns the concerned project or to which belongs the user","title":"Actors"},{"location":"qfieldcloud/dev/permissions/#actions","text":"0 -> Not allowed 1 -> Allowed - -> Irrelevant Action 1 2 3 4 5 6 7 8 9 10 11 List/query project's collaborator roles 0 1 - - - - - - - - - Create project's collaborator (i.e. define new collaborator) 0 0 1 1 1 0 0 0 1 1 0 Update project's collaborator's info (i.e. role) 0 0 1 1 1 0 0 0 1 1 0 Delete project's collaborator (i.e. remove user as collaborator) 0 0 1 1 1 0 0 0 1 1 0 List organization's members 0 1 - - - - - - 1 1 1 Create organization's member (i.e. define a new member) 0 0 - - - - - - 1 1 0 Get organization's member info (i.e. role) 0 1 - - - - - - 1 1 1 Update organization's member info (i.e. role) 0 0 - - - - - - 1 1 0 Delete organization's member info (i.e. remove user as organization's member) 0 0 - - - - - - 1 1 0 List/query public projects 0 1 1 1 1 1 1 1 1 1 1 List/query private projects 0 0 1 1 1 1 1 1 1 1 0 Update project's info 0 0 1 1 0 0 0 0 1 1 0 Create a project 0 1 - - - - - - 1 1 0 Delete project 0 0 1 0 0 0 0 0 1 1 0 Add deltafile 0 0 1 1 1 1 1 0 1 1 0 List project's deltafiles 0 0 1 1 1 1 1 0 1 1 0 Get deltafile's status 0 0 1 1 1 1 1 0 1 1 0 List project's files (qfieldsync) 0 0 1 1 1 1 1 1 1 1 0 Download project's files (qfieldsync) 0 0 1 1 1 1 1 1 1 1 0 Upload project's files (qfieldsync) 0 0 1 1 1 1 1 0 1 1 0 Delete project's files (qfieldsync) 0 0 1 1 1 1 1 0 1 1 0 List project's files (qfield) 0 0 1 1 1 1 1 1 1 1 0 Download project's files (qfield) 0 0 1 1 1 1 1 1 1 1 0 List users and organizations 0 1 - - - - - - - - - Get user's public informations 0 1 - - - - - - - - - Get user's detailed informations 0 0 - - - - - - 1 1 0 Update user's informations 0 0 1 - - - - - 0 0 0 Delete user 0 0 1 - - - - - 0 0 0 Get API status 1 1 - - - - - - - - -","title":"Actions"},{"location":"qfieldcloud/dev/permissions/#roles","text":"","title":"Roles"},{"location":"qfieldcloud/dev/permissions/#projectcollaborator","text":"A collaborator of an normal user project can only be reporter or reader. Editor or manager can only be set to an organization's project. Roles A higher role always include also the lowest ones Name Description admin The owner of a project is always admin of the project. He can add and remove collaborators manager Can add or remove collaborators editor Can edit data reporter Can only insert data (no update nor delete). (Don't have to be a collaborator?) reader Can read data. (Don't have to be a collaborator?)","title":"ProjectCollaborator"},{"location":"qfieldcloud/dev/permissions/#organizationmember","text":"Roles A higher role always include also the lowest ones Name Description admin She can add and remove members and create project member (difference compared to an other user is for billing reasons only)","title":"OrganizationMember"},{"location":"qfieldcloud/dev/storage/","text":"Storage \u00b6 File storage is done on a Simple Storage System (i.e. S3), with file versioning enabled. All configurations for connecting to the storage, including the name of the bucket used, are defined in the file /conf/env.app . Prefixes (directories) \u00b6 The used prefixes (which can be conceptually considered as directories) on S3 for users files storage, are the following: Prefix Contents File names Metadata `/projects/ /files/` The files of the QFieldCloud project, uploaded by the user Actual file name including the relative path (e.g. `foo/bar/project.qgs`) `Sha256sum` containing the sha256 hashcode of the file `/projects/ /deltas/` The deltafiles with the changes to the data, uploaded by QField The file name is the the deltafile id's UUID code `Sha256sum` containing the sha256 hashcode of the file, `Status` containing the status of the deltafile (e.g. `APPLIED_WITH_CONFLICTS`) `/projects/ /export/` The files generated by QFieldSync on the server, that are to be downloaded by QField Actual file name including the relative path (e.g. `foo/bar/project.qgs`) `Sha256sum` containing the sha256 hashcode of the file APIs \u00b6 Here is a rough description of how APIs interact with storage. /files/ endpoints (aka QGIS API) \u00b6 The /files/ endpoints, work directly with files saved with the /projects/<uuid:projectid>/files/ prefix, so, by uploading a file, the file is stored as is in the storage. The endpoints to list, download and delete a file, work directly with the content of the storage. /qfield-files/ endpoints (aka QField API) \u00b6 The /qfield-files/ endpoints, work asynchronously. The endpoint GET /qfield-files/{projectid}/ , will run a docker container with QGIS and QFieldSync that will prepare a project export ready to be used on QField. The generated files are saved with the prefix /projects/<uuid:projectid>/export/ that is used by the endpoints to list and download files for qfield. /deltas/ endpoints \u00b6 The /deltas/ endpoints, work asynchronously. The endpoint POST /deltas/{projectid}/ , will run a docker container with QGIS and the apply-deltas script that will apply the deltafile to the original datasource. Modified files (e.g. file-based datasource contained in the QFieldCloud project) are updated into original position ( /projects/<uuid:projectid>/files/ prefix). The status of the apply-deltas script is also stored as metadata of the deltafile itself.","title":"Storage"},{"location":"qfieldcloud/dev/storage/#storage","text":"File storage is done on a Simple Storage System (i.e. S3), with file versioning enabled. All configurations for connecting to the storage, including the name of the bucket used, are defined in the file /conf/env.app .","title":"Storage"},{"location":"qfieldcloud/dev/storage/#prefixes-directories","text":"The used prefixes (which can be conceptually considered as directories) on S3 for users files storage, are the following: Prefix Contents File names Metadata `/projects/ /files/` The files of the QFieldCloud project, uploaded by the user Actual file name including the relative path (e.g. `foo/bar/project.qgs`) `Sha256sum` containing the sha256 hashcode of the file `/projects/ /deltas/` The deltafiles with the changes to the data, uploaded by QField The file name is the the deltafile id's UUID code `Sha256sum` containing the sha256 hashcode of the file, `Status` containing the status of the deltafile (e.g. `APPLIED_WITH_CONFLICTS`) `/projects/ /export/` The files generated by QFieldSync on the server, that are to be downloaded by QField Actual file name including the relative path (e.g. `foo/bar/project.qgs`) `Sha256sum` containing the sha256 hashcode of the file","title":"Prefixes (directories)"},{"location":"qfieldcloud/dev/storage/#apis","text":"Here is a rough description of how APIs interact with storage.","title":"APIs"},{"location":"qfieldcloud/dev/storage/#files-endpoints-aka-qgis-api","text":"The /files/ endpoints, work directly with files saved with the /projects/<uuid:projectid>/files/ prefix, so, by uploading a file, the file is stored as is in the storage. The endpoints to list, download and delete a file, work directly with the content of the storage.","title":"/files/ endpoints (aka QGIS API)"},{"location":"qfieldcloud/dev/storage/#qfield-files-endpoints-aka-qfield-api","text":"The /qfield-files/ endpoints, work asynchronously. The endpoint GET /qfield-files/{projectid}/ , will run a docker container with QGIS and QFieldSync that will prepare a project export ready to be used on QField. The generated files are saved with the prefix /projects/<uuid:projectid>/export/ that is used by the endpoints to list and download files for qfield.","title":"/qfield-files/ endpoints (aka QField API)"},{"location":"qfieldcloud/dev/storage/#deltas-endpoints","text":"The /deltas/ endpoints, work asynchronously. The endpoint POST /deltas/{projectid}/ , will run a docker container with QGIS and the apply-deltas script that will apply the deltafile to the original datasource. Modified files (e.g. file-based datasource contained in the QFieldCloud project) are updated into original position ( /projects/<uuid:projectid>/files/ prefix). The status of the apply-deltas script is also stored as metadata of the deltafile itself.","title":"/deltas/ endpoints"},{"location":"qfieldcloud/dev/system/","text":"System Documentation \u00b6 The aim of this document is to provide an overview of the system to understand the underlaying logic and technology. Architecture \u00b6 Data model \u00b6 Actors \u00b6 Client (QField or other clients) \u00b6 The features are: Download QFieldCloud project Edit QFieldCloud project's data Synchronize data with QFieldCloud Desktop (QGIS + QFieldSync Desktop) \u00b6 Features: Create QGIS project Configure layer actions Upload QGIS project and related files Edit QGIS project Server (QFieldCloud + QGIS + QFieldSync Server) \u00b6 Features: Create QFieldCloud project Create QFieldCloud users and organizations Store QGIS project and related files in QFieldCloud project Allow to download QFieldCloud project included the offline or hybrid data package Apply diff files to the original data Entities and Concepts \u00b6 QGIS Project \u00b6 A QGIS project is a .qgs or .qgz file. A Project is created on QGIS Desktop and uploaded to QFieldCloud using the QGIS's plugin QFieldSync. Before the uploading of the QGIS project, it is necessary for each layer of the QGIS project an \"action\" that determines how QFieldSync and QField should treat the layer. This information is saved within the QGS project as layer's customProperty , with the QFieldSync/action key. The available actions are: Action internal name Name showed in the UI OFFLINE Consolidate NO_ACTION Live layer REMOVE Ignore layer COPY Copy KEEP_EXISTING Keep Existing This would be the behavior of QFieldSync Desktop with the different layer actions: Action File based layer Not file based layer OFFLINE Create a consolidated copy of the data Create a consolidated copy of the data NO_ACTION N/A No action on the layer REMOVE Remove the layer from the project Remove the layer from the project COPY Make source path relative and copy the file N/A KEEP_EXISTING Make source path relative and copy the file if it does not exist N/A This is the behavior of QFieldCloud (QFieldSync Server) with the layers: Action File based layer Not file based OFFLINE Create consolidated copy of the data on pull, apply delta file on push to original data source Create consolidated copy of the data on pull, apply delta file on push to original data source NO_ACTION N/A No action on the layer REMOVE Remove the layer from the project Remove the layer from the project COPY Make source path relative and create copy of the data on pull, apply delta file on push to original data source N/A KEEP_EXISTING Make source path relative and create copy of the data on pull, apply delta file on push to original data source N/A This is the behavior of QField with the layers: Action File based layer Not file based layer OFFLINE Create and push deltafile N/A (it's always file based at this point) NO_ACTION N/A Edit the online (live) database REMOVE N/A (the layer is no longer there) N/A (the layer is no longer there) COPY Create and push deltafile N/A KEEP_EXISTING Create and push deltafile N/A In summary, for with QFieldCloud: NO_ACTION is used for online layers that are located on a server accessible via the Internet and that are modified directly by QField. HYBRID means that a geopackage will be generated on the server (or directly on the desktop for file-based layers) and downloaded by clients. The client will generate deltafiles of the changes. OFFLINE is used for example to work with local databases not visible by QFieldCloud which are consolidated before being loaded from the desktop to the server and are not synchronized with the original data by QFieldCloud. REMOVE will simply remove the layer from the project. KEEP_EXISTENT will not be used for QFieldCloud syncronizations. From QFieldSync it will be possible to update a project already loaded on QFieldCloud. In the event that the changes concern only styles, forms etc. but not the structure of the layers, the project on the server will simply be updated. If there are changes in the layers structure, the project will be reset on the server (delta files will be deleted) and for each client it will be necessary to download the updated version of the project before being able to push new changes. QFieldCloud Project \u00b6 Is composed of one and only one QGIS project and the possible related files (e.g. geopackages, images, \u2026) included the offline or hybrid data package. Diff files \u00b6 APIs \u00b6 The autogenerated REST API documentation is available on http://dev.qfield.cloud/swagger/ Synchronization \u00b6 Permissions \u00b6 Remote datasources credentials \u00b6 Use Cases \u00b6 Hybrid \u00b6 Hybrid editing mode with synchronization on the server Offline database \u00b6 Offline editing mode with desktop synchronization","title":"System Documentation"},{"location":"qfieldcloud/dev/system/#system-documentation","text":"The aim of this document is to provide an overview of the system to understand the underlaying logic and technology.","title":"System Documentation"},{"location":"qfieldcloud/dev/system/#architecture","text":"","title":"Architecture"},{"location":"qfieldcloud/dev/system/#data-model","text":"","title":"Data model"},{"location":"qfieldcloud/dev/system/#actors","text":"","title":"Actors"},{"location":"qfieldcloud/dev/system/#client-qfield-or-other-clients","text":"The features are: Download QFieldCloud project Edit QFieldCloud project's data Synchronize data with QFieldCloud","title":"Client (QField or other clients)"},{"location":"qfieldcloud/dev/system/#desktop-qgis-qfieldsync-desktop","text":"Features: Create QGIS project Configure layer actions Upload QGIS project and related files Edit QGIS project","title":"Desktop (QGIS + QFieldSync Desktop)"},{"location":"qfieldcloud/dev/system/#server-qfieldcloud-qgis-qfieldsync-server","text":"Features: Create QFieldCloud project Create QFieldCloud users and organizations Store QGIS project and related files in QFieldCloud project Allow to download QFieldCloud project included the offline or hybrid data package Apply diff files to the original data","title":"Server (QFieldCloud + QGIS + QFieldSync Server)"},{"location":"qfieldcloud/dev/system/#entities-and-concepts","text":"","title":"Entities and Concepts"},{"location":"qfieldcloud/dev/system/#qgis-project","text":"A QGIS project is a .qgs or .qgz file. A Project is created on QGIS Desktop and uploaded to QFieldCloud using the QGIS's plugin QFieldSync. Before the uploading of the QGIS project, it is necessary for each layer of the QGIS project an \"action\" that determines how QFieldSync and QField should treat the layer. This information is saved within the QGS project as layer's customProperty , with the QFieldSync/action key. The available actions are: Action internal name Name showed in the UI OFFLINE Consolidate NO_ACTION Live layer REMOVE Ignore layer COPY Copy KEEP_EXISTING Keep Existing This would be the behavior of QFieldSync Desktop with the different layer actions: Action File based layer Not file based layer OFFLINE Create a consolidated copy of the data Create a consolidated copy of the data NO_ACTION N/A No action on the layer REMOVE Remove the layer from the project Remove the layer from the project COPY Make source path relative and copy the file N/A KEEP_EXISTING Make source path relative and copy the file if it does not exist N/A This is the behavior of QFieldCloud (QFieldSync Server) with the layers: Action File based layer Not file based OFFLINE Create consolidated copy of the data on pull, apply delta file on push to original data source Create consolidated copy of the data on pull, apply delta file on push to original data source NO_ACTION N/A No action on the layer REMOVE Remove the layer from the project Remove the layer from the project COPY Make source path relative and create copy of the data on pull, apply delta file on push to original data source N/A KEEP_EXISTING Make source path relative and create copy of the data on pull, apply delta file on push to original data source N/A This is the behavior of QField with the layers: Action File based layer Not file based layer OFFLINE Create and push deltafile N/A (it's always file based at this point) NO_ACTION N/A Edit the online (live) database REMOVE N/A (the layer is no longer there) N/A (the layer is no longer there) COPY Create and push deltafile N/A KEEP_EXISTING Create and push deltafile N/A In summary, for with QFieldCloud: NO_ACTION is used for online layers that are located on a server accessible via the Internet and that are modified directly by QField. HYBRID means that a geopackage will be generated on the server (or directly on the desktop for file-based layers) and downloaded by clients. The client will generate deltafiles of the changes. OFFLINE is used for example to work with local databases not visible by QFieldCloud which are consolidated before being loaded from the desktop to the server and are not synchronized with the original data by QFieldCloud. REMOVE will simply remove the layer from the project. KEEP_EXISTENT will not be used for QFieldCloud syncronizations. From QFieldSync it will be possible to update a project already loaded on QFieldCloud. In the event that the changes concern only styles, forms etc. but not the structure of the layers, the project on the server will simply be updated. If there are changes in the layers structure, the project will be reset on the server (delta files will be deleted) and for each client it will be necessary to download the updated version of the project before being able to push new changes.","title":"QGIS Project"},{"location":"qfieldcloud/dev/system/#qfieldcloud-project","text":"Is composed of one and only one QGIS project and the possible related files (e.g. geopackages, images, \u2026) included the offline or hybrid data package.","title":"QFieldCloud Project"},{"location":"qfieldcloud/dev/system/#diff-files","text":"","title":"Diff files"},{"location":"qfieldcloud/dev/system/#apis","text":"The autogenerated REST API documentation is available on http://dev.qfield.cloud/swagger/","title":"APIs"},{"location":"qfieldcloud/dev/system/#synchronization","text":"","title":"Synchronization"},{"location":"qfieldcloud/dev/system/#permissions","text":"","title":"Permissions"},{"location":"qfieldcloud/dev/system/#remote-datasources-credentials","text":"","title":"Remote datasources credentials"},{"location":"qfieldcloud/dev/system/#use-cases","text":"","title":"Use Cases"},{"location":"qfieldcloud/dev/system/#hybrid","text":"Hybrid editing mode with synchronization on the server","title":"Hybrid"},{"location":"qfieldcloud/dev/system/#offline-database","text":"Offline editing mode with desktop synchronization","title":"Offline database"},{"location":"qfieldcloud/dev/web/","text":"Web UI \u00b6 This is only for internal development. Explanations how permissions, data querying and template access are handled using Djangos tools, ie urls, views and django-templates. (CBV=class based views) permissions \u00b6 permission control levels \u00b6 There are 2 levels of permisson control: 1. view-level: \u00b6 If a user tries to directly access an unpermitted resource (url), then redirect to a 'unpermitted page' with a message. 2. template-level: \u00b6 Once a user can access a specific url, he will only see the control buttons and information according to his permissions, which is passed to the template with context variables. information flow \u00b6 All permission logic to control Details- and CRUD-templates, is derived from core.permissions_utils.py. The information flow for a http-request via url is as follows: get the url parameters (eg .../<str:content_owner>/... ) get the objects via SomeModel . objects . get / filter ( field = urlParam ) pass the required objects to the permissions_utils ( ... ) add the received permissions to the View . dispatch ( ... ) method to redirect if a user wants to access an unpermitted page add the received permissions to the template context to show only the permitted elements (eg. update-button) Info (4. and 5. are implemented via Mixins to stay DRY if used on many Views, else the dispatch method is directly added on a specific View. The Mixins can only be used for Views that are connected to specific urls which contain the necessary url-parameters) querysets \u00b6 Similiar to the template-level permissions, the queryset gets filtered in on views level. information flow \u00b6 Similar to permission flow. The querysets which define the data the user can see get generated using the core.querysets_utils.py. The required SomeMode.objects... are queried using the corresponding url-parameters.","title":"Web UI"},{"location":"qfieldcloud/dev/web/#web-ui","text":"This is only for internal development. Explanations how permissions, data querying and template access are handled using Djangos tools, ie urls, views and django-templates. (CBV=class based views)","title":"Web UI"},{"location":"qfieldcloud/dev/web/#permissions","text":"","title":"permissions"},{"location":"qfieldcloud/dev/web/#permission-control-levels","text":"There are 2 levels of permisson control:","title":"permission control levels"},{"location":"qfieldcloud/dev/web/#1-view-level","text":"If a user tries to directly access an unpermitted resource (url), then redirect to a 'unpermitted page' with a message.","title":"1. view-level:"},{"location":"qfieldcloud/dev/web/#2-template-level","text":"Once a user can access a specific url, he will only see the control buttons and information according to his permissions, which is passed to the template with context variables.","title":"2. template-level:"},{"location":"qfieldcloud/dev/web/#information-flow","text":"All permission logic to control Details- and CRUD-templates, is derived from core.permissions_utils.py. The information flow for a http-request via url is as follows: get the url parameters (eg .../<str:content_owner>/... ) get the objects via SomeModel . objects . get / filter ( field = urlParam ) pass the required objects to the permissions_utils ( ... ) add the received permissions to the View . dispatch ( ... ) method to redirect if a user wants to access an unpermitted page add the received permissions to the template context to show only the permitted elements (eg. update-button) Info (4. and 5. are implemented via Mixins to stay DRY if used on many Views, else the dispatch method is directly added on a specific View. The Mixins can only be used for Views that are connected to specific urls which contain the necessary url-parameters)","title":"information flow"},{"location":"qfieldcloud/dev/web/#querysets","text":"Similiar to the template-level permissions, the queryset gets filtered in on views level.","title":"querysets"},{"location":"qfieldcloud/dev/web/#information-flow_1","text":"Similar to permission flow. The querysets which define the data the user can see get generated using the core.querysets_utils.py. The required SomeMode.objects... are queried using the corresponding url-parameters.","title":"information flow"},{"location":"qfieldsync/main/","text":"QFieldSync plugin \u00b6 The QFieldSync plugin helps preparing and packaging QGIS projects for QField. QFieldSync supports your project preparation with automating the following: Required steps for project setup (e.g. :ref: portable_project ) Creating basemaps from a single raster layer or from a style defined in a map theme. Configuring the offline editing functionality and synchronizing changes back. Workflow \u00b6 To get a quick overview of the process, here is a list of typical steps: Create a QField package. This is a working copy in a separate folder. Copy the QField package to the target device. Go out and collect data. Copy the modified data back to your desktop computer. Synchronize the modified data with your database or files. Installation \u00b6 In QGIS, open the plugin library and search for qfield sync . Select the plugin in the list and click on Install . Configuration \u00b6 The project configuration is saved in the master .qgs project file. This way it is possible to pre-configure a project once and use it repeatedly. Layer configuration \u00b6 In the project configuration dialog, an action can be defined for each layer individually. Depending on the layer type, different types of actions are available. Copy The layer will be copied to the package folder. This is only available for file-based layers. No action The layer source will be left untouched. This is only available for non-file-based layers like WMS, WFS, Postgis... Offline editing A working copy of the layer is copied into the package folder. Every change which is done in the packaged project during work is recorded in a changelog. When synchronizing the changes back later on, this log will be replayed and all changes also be applied to the main data base. There is no conflict handling in place. Remove The layer will be removed from the working copy. This is useful if a layer is used in the basemap and will not be available in the packaged project. Base map configuration \u00b6 A base map is a raster layer which is added as the bottommost layer to the packaged project file. If the base map option is enabled, a base map will be rendered, whenever the project is packaged. The area of interest - the extent which will be rendered - will be chosen at packaging time. There are two possible sources for a base map: Layer A raster layer. This is useful to take an offline copy of an online layer like a WMS or to take a working copy of an unsupported format like an ECW or MrSID layer. Map Theme A map theme. This is useful to create a base map based on a combination of several layers with styling. These layers can then be removed from the working package and do not need to be rendered on the device. This can save some disk space and battery on the device. The tile size defines the spatial resolution. It determines the number of map units per pixel. If the map canvas CRS has meters as units and tile size is set to 1, each raster pixel will have a spatial extent of 1x1 m, if it is set to 1000, each raster pixel will have a spatial extent of 1 square kilometer. Offline editing configuration \u00b6 If only synchronize features in area of interest is checked, only features which are within the extent of the map canvas as packaging time will be copied to the offline editing working copy. Package for Qfield \u00b6 Once the project is configured, package it in a folder. This folder will contain the .qgs and the data used in it. Copy the folder on your device. Open Qfield, open the project and start collecting data. Make also sure to save the QGIS project using the regular Save As of QGIS as you'll have to re-open it later when you want to synchronize the changes. Synchronize from Qfield \u00b6 When you want to synchronize what you have collected, re-open the project in QGIS (the one you saved with a regular Save As). Copy the project folder from your device to your computer and use the Synchronize from Qfield menu to synchronize your changes from the protable project to the main project.","title":"QFieldSync plugin"},{"location":"qfieldsync/main/#qfieldsync-plugin","text":"The QFieldSync plugin helps preparing and packaging QGIS projects for QField. QFieldSync supports your project preparation with automating the following: Required steps for project setup (e.g. :ref: portable_project ) Creating basemaps from a single raster layer or from a style defined in a map theme. Configuring the offline editing functionality and synchronizing changes back.","title":"QFieldSync plugin"},{"location":"qfieldsync/main/#workflow","text":"To get a quick overview of the process, here is a list of typical steps: Create a QField package. This is a working copy in a separate folder. Copy the QField package to the target device. Go out and collect data. Copy the modified data back to your desktop computer. Synchronize the modified data with your database or files.","title":"Workflow"},{"location":"qfieldsync/main/#installation","text":"In QGIS, open the plugin library and search for qfield sync . Select the plugin in the list and click on Install .","title":"Installation"},{"location":"qfieldsync/main/#configuration","text":"The project configuration is saved in the master .qgs project file. This way it is possible to pre-configure a project once and use it repeatedly.","title":"Configuration"},{"location":"qfieldsync/main/#layer-configuration","text":"In the project configuration dialog, an action can be defined for each layer individually. Depending on the layer type, different types of actions are available. Copy The layer will be copied to the package folder. This is only available for file-based layers. No action The layer source will be left untouched. This is only available for non-file-based layers like WMS, WFS, Postgis... Offline editing A working copy of the layer is copied into the package folder. Every change which is done in the packaged project during work is recorded in a changelog. When synchronizing the changes back later on, this log will be replayed and all changes also be applied to the main data base. There is no conflict handling in place. Remove The layer will be removed from the working copy. This is useful if a layer is used in the basemap and will not be available in the packaged project.","title":"Layer configuration"},{"location":"qfieldsync/main/#base-map-configuration","text":"A base map is a raster layer which is added as the bottommost layer to the packaged project file. If the base map option is enabled, a base map will be rendered, whenever the project is packaged. The area of interest - the extent which will be rendered - will be chosen at packaging time. There are two possible sources for a base map: Layer A raster layer. This is useful to take an offline copy of an online layer like a WMS or to take a working copy of an unsupported format like an ECW or MrSID layer. Map Theme A map theme. This is useful to create a base map based on a combination of several layers with styling. These layers can then be removed from the working package and do not need to be rendered on the device. This can save some disk space and battery on the device. The tile size defines the spatial resolution. It determines the number of map units per pixel. If the map canvas CRS has meters as units and tile size is set to 1, each raster pixel will have a spatial extent of 1x1 m, if it is set to 1000, each raster pixel will have a spatial extent of 1 square kilometer.","title":"Base map configuration"},{"location":"qfieldsync/main/#offline-editing-configuration","text":"If only synchronize features in area of interest is checked, only features which are within the extent of the map canvas as packaging time will be copied to the offline editing working copy.","title":"Offline editing configuration"},{"location":"qfieldsync/main/#package-for-qfield","text":"Once the project is configured, package it in a folder. This folder will contain the .qgs and the data used in it. Copy the folder on your device. Open Qfield, open the project and start collecting data. Make also sure to save the QGIS project using the regular Save As of QGIS as you'll have to re-open it later when you want to synchronize the changes.","title":"Package for Qfield"},{"location":"qfieldsync/main/#synchronize-from-qfield","text":"When you want to synchronize what you have collected, re-open the project in QGIS (the one you saved with a regular Save As). Copy the project folder from your device to your computer and use the Synchronize from Qfield menu to synchronize your changes from the protable project to the main project.","title":"Synchronize from Qfield"}]}